use std::str::FromStr;
use lang::ast::*;
use lalrpop_util::ParseError;

grammar;

pub Term: Term = {
    <s:Symbol> => Term::Symbol(s),
    <n:Number> => Term::Num(n),
    <s:String> => Term::Str(s),
    "(" <t:Term> ")" => t,
};

Number: Num = {
    r"[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?" =>? i32::from_str(<>).map(Num::Int).or(
        f64::from_str(<>).map(Num::Double).map_err(|_| ParseError::User {
            error: "Invalid number"
        })
    ),
}

String: String = {
    <s:r"'[^\n]*'"> => s[1..s.len()-1].to_string(),
    <s:r#""[^\n]*""#> => s[1..s.len()-1].to_string(),
}

Symbol: Symbol = {
    <s:r"[a-zA-Z_$][a-zA-Z0-9_$]*"> => Symbol { id: 0, name: s.to_string() },
}
